{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mord im Paradies Die Malediven \u2013 ein Ort der unvergleichlichen Sch\u00f6nheit, in dem t\u00fcrkisfarbenes Wasser sanft gegen wei\u00dfe Sandstr\u00e4nde pl\u00e4tschert. Ein Paradies auf Erden, ein Zufluchtsort f\u00fcr die Reichen und Ber\u00fchmten. Doch heute war der Himmel nicht blau, und die Wellen trugen eine schwere Stille. Ein Mord hatte das Paradies in eine d\u00fcstere B\u00fchne verwandelt. (Kapitel 1: Die G\u00e4ste des Azure Resorts)[./kapitel1.md] Privatdetektiv Leon Falk genoss seinen wohlverdienten Urlaub in seinem kleinen B\u00fcro in London, als der Anruf kam. Es war keine gew\u00f6hnliche Anfrage \u2013 der Auftraggeber war niemand anderes als der Milliard\u00e4r Ethan Solano, ein Immobilienmogul, der f\u00fcr seine luxuri\u00f6sen Resorts auf der ganzen Welt bekannt war. \u201eHerr Falk,\u201c begann Solano mit einer tiefen, besorgten Stimme, \u201eich brauche Ihre Dienste. Ein Freund von mir wurde auf den Malediven ermordet, und ich vertraue den \u00f6rtlichen Beh\u00f6rden nicht. Ich m\u00f6chte, dass Sie den Fall \u00fcbernehmen.\u201c Leon z\u00f6gerte. Mord auf den Malediven? Zwischen Palmen und Luxusvillen? Es klang surreal. Doch die Stimme des Milliard\u00e4rs verriet, dass hier etwas Gr\u00f6\u00dferes im Spiel war. Falk packte seine Sachen und bestieg am n\u00e4chsten Morgen einen Privatjet Richtung Mal\u00e9. (Kapitel 2: Transaktionen zwischen G\u00e4sten)[./kapitel2.md] (Kapitel 3: Verd\u00e4chtige G\u00e4ste)[./kapitel3.md]","title":"Mord im Paradies"},{"location":"#mord-im-paradies","text":"Die Malediven \u2013 ein Ort der unvergleichlichen Sch\u00f6nheit, in dem t\u00fcrkisfarbenes Wasser sanft gegen wei\u00dfe Sandstr\u00e4nde pl\u00e4tschert. Ein Paradies auf Erden, ein Zufluchtsort f\u00fcr die Reichen und Ber\u00fchmten. Doch heute war der Himmel nicht blau, und die Wellen trugen eine schwere Stille. Ein Mord hatte das Paradies in eine d\u00fcstere B\u00fchne verwandelt.","title":"Mord im Paradies"},{"location":"#kapitel-1-die-gaste-des-azure-resortskapitel1md","text":"Privatdetektiv Leon Falk genoss seinen wohlverdienten Urlaub in seinem kleinen B\u00fcro in London, als der Anruf kam. Es war keine gew\u00f6hnliche Anfrage \u2013 der Auftraggeber war niemand anderes als der Milliard\u00e4r Ethan Solano, ein Immobilienmogul, der f\u00fcr seine luxuri\u00f6sen Resorts auf der ganzen Welt bekannt war. \u201eHerr Falk,\u201c begann Solano mit einer tiefen, besorgten Stimme, \u201eich brauche Ihre Dienste. Ein Freund von mir wurde auf den Malediven ermordet, und ich vertraue den \u00f6rtlichen Beh\u00f6rden nicht. Ich m\u00f6chte, dass Sie den Fall \u00fcbernehmen.\u201c Leon z\u00f6gerte. Mord auf den Malediven? Zwischen Palmen und Luxusvillen? Es klang surreal. Doch die Stimme des Milliard\u00e4rs verriet, dass hier etwas Gr\u00f6\u00dferes im Spiel war. Falk packte seine Sachen und bestieg am n\u00e4chsten Morgen einen Privatjet Richtung Mal\u00e9. (Kapitel 2: Transaktionen zwischen G\u00e4sten)[./kapitel2.md] (Kapitel 3: Verd\u00e4chtige G\u00e4ste)[./kapitel3.md]","title":"(Kapitel 1: Die G\u00e4ste des Azure Resorts)[./kapitel1.md]"},{"location":"kapitel1/","text":"Kapitel 1: Die G\u00e4ste des Azure Resorts Du erh\u00e4ltst einen Anruf von Ethan Solano. Er berichtet von einem Mordfall im exklusiven Azure Resort. Um die Ermittlungen zu beginnen, musst du die Liste der G\u00e4ste durchsuchen. Aufgabe F\u00fchre eine SQL-Abfrage aus, um alle G\u00e4ste zu sehen. SELECT * FROM guests; Abfrage ausf\u00fchren Ergebnis Datenbank zur\u00fccksetzen var db; // Initialisiere die Datenbank function loadDatabase() { initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE guests ( id INT, name TEXT, occupation TEXT );`); db.run(`INSERT INTO guests (id, name, occupation) VALUES (1, 'Isabella Vance', 'Schauspielerin'), (2, 'Luca DeLuca', 'Galerist'), (3, 'Dr. Rajiv Patel', 'Arzt') `); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Initialisiere die Datenbank beim Laden der Seite loadDatabase();","title":"Kapitel 1"},{"location":"kapitel1/#kapitel-1-die-gaste-des-azure-resorts","text":"Du erh\u00e4ltst einen Anruf von Ethan Solano. Er berichtet von einem Mordfall im exklusiven Azure Resort. Um die Ermittlungen zu beginnen, musst du die Liste der G\u00e4ste durchsuchen.","title":"Kapitel 1: Die G\u00e4ste des Azure Resorts"},{"location":"kapitel1/#aufgabe","text":"F\u00fchre eine SQL-Abfrage aus, um alle G\u00e4ste zu sehen. SELECT * FROM guests; Abfrage ausf\u00fchren","title":"Aufgabe"},{"location":"kapitel1/#ergebnis","text":"Datenbank zur\u00fccksetzen var db; // Initialisiere die Datenbank function loadDatabase() { initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE guests ( id INT, name TEXT, occupation TEXT );`); db.run(`INSERT INTO guests (id, name, occupation) VALUES (1, 'Isabella Vance', 'Schauspielerin'), (2, 'Luca DeLuca', 'Galerist'), (3, 'Dr. Rajiv Patel', 'Arzt') `); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Initialisiere die Datenbank beim Laden der Seite loadDatabase();","title":"Ergebnis"},{"location":"kapitel2/","text":"Kapitel 2: Transaktionen zwischen G\u00e4sten Nachdem du die G\u00e4steliste durchgesehen hast, findest du heraus, dass Vera Jansen finanzielle Transaktionen mit einigen G\u00e4sten des Resorts durchgef\u00fchrt hat. Jetzt musst du nachsehen, welche G\u00e4ste an diesen Transaktionen beteiligt waren. Aufgabe F\u00fchre eine SQL-Abfrage aus, um alle Transaktionen anzuzeigen, in denen Vera Jansen beteiligt war. SELECT * FROM transactions WHERE party_b = 'Vera Jansen'; Abfrage ausf\u00fchren Ergebnis Datenbank zur\u00fccksetzen var db; // Initialisiere die Datenbank function loadDatabase() { initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000) `); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Initialisiere die Datenbank beim Laden der Seite loadDatabase();","title":"Kapitel 2"},{"location":"kapitel2/#kapitel-2-transaktionen-zwischen-gasten","text":"Nachdem du die G\u00e4steliste durchgesehen hast, findest du heraus, dass Vera Jansen finanzielle Transaktionen mit einigen G\u00e4sten des Resorts durchgef\u00fchrt hat. Jetzt musst du nachsehen, welche G\u00e4ste an diesen Transaktionen beteiligt waren.","title":"Kapitel 2: Transaktionen zwischen G\u00e4sten"},{"location":"kapitel2/#aufgabe","text":"F\u00fchre eine SQL-Abfrage aus, um alle Transaktionen anzuzeigen, in denen Vera Jansen beteiligt war. SELECT * FROM transactions WHERE party_b = 'Vera Jansen'; Abfrage ausf\u00fchren","title":"Aufgabe"},{"location":"kapitel2/#ergebnis","text":"Datenbank zur\u00fccksetzen var db; // Initialisiere die Datenbank function loadDatabase() { initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000) `); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Initialisiere die Datenbank beim Laden der Seite loadDatabase();","title":"Ergebnis"},{"location":"kapitel3/","text":"Kapitel 3: Verd\u00e4chtige G\u00e4ste Deine Untersuchungen zeigen, dass einige der G\u00e4ste in fragw\u00fcrdige Aktivit\u00e4ten verwickelt sind. Du musst herausfinden, welche G\u00e4ste an besonders hohen Transaktionen beteiligt sind. Aufgabe F\u00fchre eine SQL-Abfrage aus, um alle G\u00e4ste zu finden, die an Transaktionen \u00fcber 200.000 beteiligt waren. SELECT * FROM transactions WHERE amount > 200000; Abfrage ausf\u00fchren Ergebnis Datenbank zur\u00fccksetzen var db; // Initialisiere die Datenbank function loadDatabase() { initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000) `); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Initialisiere die Datenbank beim Laden der Seite loadDatabase();","title":"Kapitel 3"},{"location":"kapitel3/#kapitel-3-verdachtige-gaste","text":"Deine Untersuchungen zeigen, dass einige der G\u00e4ste in fragw\u00fcrdige Aktivit\u00e4ten verwickelt sind. Du musst herausfinden, welche G\u00e4ste an besonders hohen Transaktionen beteiligt sind.","title":"Kapitel 3: Verd\u00e4chtige G\u00e4ste"},{"location":"kapitel3/#aufgabe","text":"F\u00fchre eine SQL-Abfrage aus, um alle G\u00e4ste zu finden, die an Transaktionen \u00fcber 200.000 beteiligt waren. SELECT * FROM transactions WHERE amount > 200000; Abfrage ausf\u00fchren","title":"Aufgabe"},{"location":"kapitel3/#ergebnis","text":"Datenbank zur\u00fccksetzen var db; // Initialisiere die Datenbank function loadDatabase() { initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000) `); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Initialisiere die Datenbank beim Laden der Seite loadDatabase();","title":"Ergebnis"},{"location":"kapitel4/","text":"Kapitel 4: Der entscheidende Hinweis Du bist dem M\u00f6rder auf der Spur! Ein entscheidender Hinweis verbirgt sich in den Daten, aber du musst eine letzte Abfrage durchf\u00fchren, um ihn zu finden. Aufgabe Finde heraus, welche G\u00e4ste an mehr als einer Transaktion beteiligt sind. Dies k\u00f6nnte der entscheidende Hinweis auf den T\u00e4ter sein. SELECT party_a, COUNT(*) AS transactions FROM transactions GROUP BY party_a HAVING transactions > 1; Abfrage ausf\u00fchren Ergebnis Datenbank zur\u00fccksetzen var db; // Datenbank erstellen oder aus dem localStorage laden function loadDatabase() { var savedDb = localStorage.getItem('db'); if (savedDb) { // Wenn Daten im localStorage vorhanden sind, lade sie var uintArray = new Uint8Array(atob(savedDb).split(\"\").map(function(c) { return c.charCodeAt(0); })); db = new SQL.Database(uintArray); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che } else { // Wenn keine Daten vorhanden sind, erstelle die Tabelle und f\u00fcge Daten ein initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000) `); saveDatabase(); // Daten sofort nach Initialisierung speichern document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } } // Datenbank im localStorage speichern function saveDatabase() { var binaryArray = db.export(); var base64String = btoa(String.fromCharCode.apply(null, binaryArray)); localStorage.setItem('db', base64String); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } // Datenbank nach jeder Abfrage speichern saveDatabase(); } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Datenbank zur\u00fccksetzen function resetDatabase() { localStorage.removeItem('db'); loadDatabase(); // Neue Datenbank erstellen document.getElementById('results').innerHTML = \"Datenbank zur\u00fcckgesetzt.\"; } loadDatabase(); // Initialisiere die Datenbank beim Laden der Seite","title":"Kapitel 4"},{"location":"kapitel4/#kapitel-4-der-entscheidende-hinweis","text":"Du bist dem M\u00f6rder auf der Spur! Ein entscheidender Hinweis verbirgt sich in den Daten, aber du musst eine letzte Abfrage durchf\u00fchren, um ihn zu finden.","title":"Kapitel 4: Der entscheidende Hinweis"},{"location":"kapitel4/#aufgabe","text":"Finde heraus, welche G\u00e4ste an mehr als einer Transaktion beteiligt sind. Dies k\u00f6nnte der entscheidende Hinweis auf den T\u00e4ter sein. SELECT party_a, COUNT(*) AS transactions FROM transactions GROUP BY party_a HAVING transactions > 1; Abfrage ausf\u00fchren","title":"Aufgabe"},{"location":"kapitel4/#ergebnis","text":"Datenbank zur\u00fccksetzen var db; // Datenbank erstellen oder aus dem localStorage laden function loadDatabase() { var savedDb = localStorage.getItem('db'); if (savedDb) { // Wenn Daten im localStorage vorhanden sind, lade sie var uintArray = new Uint8Array(atob(savedDb).split(\"\").map(function(c) { return c.charCodeAt(0); })); db = new SQL.Database(uintArray); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che } else { // Wenn keine Daten vorhanden sind, erstelle die Tabelle und f\u00fcge Daten ein initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000) `); saveDatabase(); // Daten sofort nach Initialisierung speichern document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } } // Datenbank im localStorage speichern function saveDatabase() { var binaryArray = db.export(); var base64String = btoa(String.fromCharCode.apply(null, binaryArray)); localStorage.setItem('db', base64String); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Ergebnis: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } // Datenbank nach jeder Abfrage speichern saveDatabase(); } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Datenbank zur\u00fccksetzen function resetDatabase() { localStorage.removeItem('db'); loadDatabase(); // Neue Datenbank erstellen document.getElementById('results').innerHTML = \"Datenbank zur\u00fcckgesetzt.\"; } loadDatabase(); // Initialisiere die Datenbank beim Laden der Seite","title":"Ergebnis"},{"location":"kapitel5/","text":"Kapitel 5: Der T\u00e4ter wird entlarvt Du hast jetzt alle Informationen gesammelt, um den T\u00e4ter zu entlarven. Du musst eine letzte Abfrage ausf\u00fchren, um den Gast zu identifizieren, der sowohl hohe Transaktionen durchgef\u00fchrt hat als auch in mehreren Transaktionen verwickelt ist. Dieser Gast ist h\u00f6chstwahrscheinlich der T\u00e4ter. Aufgabe Finde den Gast, der sowohl an mehreren Transaktionen beteiligt ist als auch Transaktionen im Wert von \u00fcber 200.000 durchgef\u00fchrt hat. SELECT party_a FROM transactions WHERE amount > 200000 GROUP BY party_a HAVING COUNT(*) > 1; Abfrage ausf\u00fchren Ergebnis Datenbank zur\u00fccksetzen var db; // Datenbank erstellen oder aus dem localStorage laden function loadDatabase() { var savedDb = localStorage.getItem('db'); if (savedDb) { // Wenn Daten im localStorage vorhanden sind, lade sie var uintArray = new Uint8Array(atob(savedDb).split(\"\").map(function(c) { return c.charCodeAt(0); })); db = new SQL.Database(uintArray); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che } else { // Wenn keine Daten vorhanden sind, erstelle die Tabelle und f\u00fcge Daten ein initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000), (3, 'Luca DeLuca', 'Vera Jansen', 150000) `); saveDatabase(); // Daten sofort nach Initialisierung speichern document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } } // Datenbank im localStorage speichern function saveDatabase() { var binaryArray = db.export(); var base64String = btoa(String.fromCharCode.apply(null, binaryArray)); localStorage.setItem('db', base64String); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Der Gast ist: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } // Datenbank nach jeder Abfrage speichern saveDatabase(); } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Datenbank zur\u00fccksetzen function resetDatabase() { localStorage.removeItem('db'); loadDatabase(); // Neue Datenbank erstellen document.getElementById('results').innerHTML = \"Datenbank zur\u00fcckgesetzt.\"; } loadDatabase(); // Initialisiere die Datenbank beim Laden der Seite","title":"Kapitel 5"},{"location":"kapitel5/#kapitel-5-der-tater-wird-entlarvt","text":"Du hast jetzt alle Informationen gesammelt, um den T\u00e4ter zu entlarven. Du musst eine letzte Abfrage ausf\u00fchren, um den Gast zu identifizieren, der sowohl hohe Transaktionen durchgef\u00fchrt hat als auch in mehreren Transaktionen verwickelt ist. Dieser Gast ist h\u00f6chstwahrscheinlich der T\u00e4ter.","title":"Kapitel 5: Der T\u00e4ter wird entlarvt"},{"location":"kapitel5/#aufgabe","text":"Finde den Gast, der sowohl an mehreren Transaktionen beteiligt ist als auch Transaktionen im Wert von \u00fcber 200.000 durchgef\u00fchrt hat. SELECT party_a FROM transactions WHERE amount > 200000 GROUP BY party_a HAVING COUNT(*) > 1; Abfrage ausf\u00fchren","title":"Aufgabe"},{"location":"kapitel5/#ergebnis","text":"Datenbank zur\u00fccksetzen var db; // Datenbank erstellen oder aus dem localStorage laden function loadDatabase() { var savedDb = localStorage.getItem('db'); if (savedDb) { // Wenn Daten im localStorage vorhanden sind, lade sie var uintArray = new Uint8Array(atob(savedDb).split(\"\").map(function(c) { return c.charCodeAt(0); })); db = new SQL.Database(uintArray); document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che } else { // Wenn keine Daten vorhanden sind, erstelle die Tabelle und f\u00fcge Daten ein initSqlJs({ locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${filename}` }).then(SQL => { db = new SQL.Database(); db.run(`CREATE TABLE transactions ( id INT, party_a TEXT, party_b TEXT, amount INT );`); db.run(`INSERT INTO transactions (id, party_a, party_b, amount) VALUES (1, 'Isabella Vance', 'Vera Jansen', 100000), (2, 'Luca DeLuca', 'Vera Jansen', 250000), (3, 'Luca DeLuca', 'Vera Jansen', 150000) `); saveDatabase(); // Daten sofort nach Initialisierung speichern document.getElementById('run-sql').disabled = false; // Aktiviert die SQL-Abfrage-Schaltfl\u00e4che }); } } // Datenbank im localStorage speichern function saveDatabase() { var binaryArray = db.export(); var base64String = btoa(String.fromCharCode.apply(null, binaryArray)); localStorage.setItem('db', base64String); } // Funktion zum Ausf\u00fchren von SQL-Abfragen function runSQL() { var sql = document.getElementById('sql-input').value; try { if (!db) { document.getElementById('results').innerHTML = \"Datenbank wird geladen, bitte warte einen Moment.\"; return; } var results = db.exec(sql); if (results.length) { document.getElementById('results').innerHTML = \"Richtig! Der Gast ist: \" + JSON.stringify(results, null, 2); } else { document.getElementById('results').innerHTML = \"Keine Ergebnisse.\"; } // Datenbank nach jeder Abfrage speichern saveDatabase(); } catch (e) { document.getElementById('results').innerHTML = \"Fehler: \" + e.message; } } // Datenbank zur\u00fccksetzen function resetDatabase() { localStorage.removeItem('db'); loadDatabase(); // Neue Datenbank erstellen document.getElementById('results').innerHTML = \"Datenbank zur\u00fcckgesetzt.\"; } loadDatabase(); // Initialisiere die Datenbank beim Laden der Seite","title":"Ergebnis"}]}